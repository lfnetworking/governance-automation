# =============================================================================
#  LFN Project Governance Automation Workflow – *Option C* (auto‑discover repos)
#  ---------------------------------------------------------------------------
#  This version treats the inventory file `.lfn/projects.yaml` as a simple list
#  of *GitHub organisations only*.  The workflow enumerates **all** repos in
#  each org at run‑time via `gh repo list`, so you never have to edit YAML when
#  projects create or archive repositories.
#
#  Inventory example ⟶
#  -------------------
#  ```yaml
#  orgs:
#    - nephio-project
#    - FDio
#    - opendaylight
#  ```
#
#  ---------------------------------------------------------------------------
#  **Secrets / Required Permissions**
#  ---------------------------------------------------------------------------
#  – `LFN_ADMIN_TOKEN` • PAT from an LFN admin with `repo`, `org:read`,
#    `workflow`, `issues`, and `project` scopes **across all target orgs**.
#    Must grant *All repositories* access in each external organisation so that
#    `gh repo list` can see private or archived repos as needed.
#  – `SLACK_WEBHOOK`   • Optional, for posting results to #lfn-gov‑bot.
# =============================================================================
name: "LFN Project Governance Automation"

on:
  # -------- Manual trigger ---------------------------------------------------
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose the run mode"
        required: true
        default: "review"
        type: choice
        options:
          - review      # Weekly lifecycle review
          - induction   # One‑off induction run for a single project
      project_org:
        description: "(induction) GitHub org where the new project lives"
        required: false
      project_repo:
        description: "(induction) Repository slug <org>/<repo> OR list in YAML"
        required: false
      contact_email:
        description: "(induction) Primary contact e‑mail for notifications"
        required: false
  # -------- Scheduled health check ------------------------------------------
  schedule:
    - cron: "0 9 * * 1"   # 09:00 UTC every Monday → 02:00 PT

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # -------------------------------------------------------------------------
  # 1) Build the matrix of projects we need to handle in this run
  # -------------------------------------------------------------------------
  enumerate-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout meta‑repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Read org inventory & expand to repo list
        id: set-matrix
        shell: bash
        env:
          MODE: ${{ github.event.inputs.mode || 'review' }}
          PROJECT_ORG: ${{ github.event.inputs.project_org }}
          PROJECT_REPO: ${{ github.event.inputs.project_repo }}
        run: |
          set -euo pipefail

          if [[ "$MODE" == "induction" ]]; then
            # Single‑project run: build JSON with one element
            echo "[\"${PROJECT_ORG}/${PROJECT_REPO}\"]" > matrix.json
          else
            orgs=$(yq -r '.orgs[]' .lfn/projects.yaml)
            matrix=()
            for org in $orgs; do
              echo "📦 Enumerating repos in $org" >&2
              for repo in $(gh repo list "$org" --json name -q '.[].name'); do
                matrix+=("\"$org/$repo\"")
              done
            done
            # Dump as a JSON array
            printf '%s\n' "${matrix[@]}" | jq -s '.' > matrix.json
          fi
          echo "Matrix=$(cat matrix.json)" >&2
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"

  # -------------------------------------------------------------------------
  # 2) Gather stats & classify each project (matrix job)
  # -------------------------------------------------------------------------
  classify:
    needs: enumerate-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo_slug: ${{ fromJson(needs.enumerate-projects.outputs.matrix) }}

    steps:
      - name: ⬇️  Setup GitHub CLI
        uses: cli/cli-action@v2
        with:
          token: ${{ secrets.LFN_ADMIN_TOKEN }}

      - name: 🔍  Collect repository metrics
        id: metrics
        shell: bash
        env:
          REPO: ${{ matrix.repo_slug }}
        run: |
          set -euo pipefail
          gh repo view "$REPO" --json nameWithOwner,defaultBranchRef,createdAt,updatedAt,assignableUsers,issues,refs,releases,pushedAt > repo.json
          echo "json=$(cat repo.json)" >> "$GITHUB_OUTPUT"

      - name: 🧮  Classify lifecycle phase
        id: phase
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const data = JSON.parse(process.env.REPO_JSON || '{}');
            const classify = require('./.github/scripts/lifecycle');
            const phase = classify(data);
            core.setOutput('phase', phase);
        env:
          REPO_JSON: ${{ steps.metrics.outputs.json }}

      - name: ⬆️  Upload per‑project result
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.repo_slug }}.json"
          path: repo.json

  # -------------------------------------------------------------------------
  # 3) Aggregate results & open / update a governance issue
  # -------------------------------------------------------------------------
  publish-report:
    needs: classify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all project artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 📊  Build markdown summary
        id: build-md
        run: |
          node .github/scripts/build-summary.js artifacts > summary.md
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          cat summary.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: ✏️  Create or update tracking issue
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.build-md.outputs.summary }}
          MODE: ${{ github.event.inputs.mode || 'review' }}
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const mode = process.env.MODE;
            const summary = process.env.SUMMARY;
            const title = mode === 'induction'
              ? `🆕 LFN Project Induction – ${process.env.PROJECT_REPO}`
              : '🔄 Weekly Lifecycle Review – LFN Projects';

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'lfn-governance',
              state: 'open',
              per_page: 100,
            });
            let issue = issues.find(i => i.title.startsWith(title));
            if (issue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: summary,
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                labels: ['lfn-governance'],
                body: summary,
              });
            }

      - name: 💬  (Optional) Notify Slack
        if: env.SLACK_WEBHOOK != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": "LFN Governance Bot",
                  "text": "${{ github.job }} completed → <${{ steps.context.outputs.url }}|view report>",
                  "mrkdwn_in": ["text", "pretext"]
                }
              ]
            }
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

# ----------------------------------------------------------------------------
#  .github/scripts/lifecycle.ts  (pseudo‑code snippet – unchanged)
# ----------------------------------------------------------------------------
#  export function classify(repo: RepoMetadata): LifecyclePhase {
#    /* … */ }
