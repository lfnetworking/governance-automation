# =============================================================================
#  LFN Project Governance Automation Workflow ‚Äì *Option¬†C* (auto‚Äëdiscover repos)
#  ---------------------------------------------------------------------------
#  CHANGELOG 2025‚Äë04‚Äë17‚Äëi
#  ‚Ä¢ Fix summary table again ‚Äì use the **artifact folder name** (org--repo) so the
#    real repository slug shows up instead of the literal word¬†‚Äúrepo‚Äù.
#  ‚Ä¢ Group results by top‚Äëlevel **Project/Org** and emit a separate table for each
#    (Nephio, FDio,¬†ONAP, ‚Ä¶) so it‚Äôs easier to scan.
# =============================================================================
name: "LFN¬†Project Governance Automation"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose the run mode"
        required: true
        default: "review"
        type: choice
        options: [review, induction]
      project_org:
        description: "(induction) GitHub org where the new project lives"
        required: false
      project_repo:
        description: "(induction) Repository slug <org>/<repo>"
        required: false
  schedule:
    - cron: "0 9 * * 1"   # 09:00¬†UTC Monday ‚Üí 02:00¬†PT

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

env:
  GH_TOKEN: ${{ secrets.LFN_ADMIN_TOKEN }}

jobs:
  enumerate-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install yq
        run: sudo apt-get update -y && sudo apt-get install -y yq

      - name: Build repo matrix
        id: set-matrix
        shell: bash
        env:
          MODE: ${{ github.event.inputs.mode || 'review' }}
          PROJECT_ORG: ${{ github.event.inputs.project_org }}
          PROJECT_REPO: ${{ github.event.inputs.project_repo }}
        run: |
          set -euo pipefail
          if [[ "$MODE" == "induction" ]]; then
            echo "matrix=[\"${PROJECT_ORG}/${PROJECT_REPO}\"]" >> "$GITHUB_OUTPUT"
          else
            declare -a matrix
            for org in $(yq -r '.orgs[]' .lfn/projects.yaml); do
              echo "üì¶ $org" >&2
              for repo in $(gh repo list "$org" --json name -q '.[].name'); do
                matrix+=("$org/$repo")
              done
            done
            printf '%s\n' "${matrix[@]}" | jq -R . | jq -cs '.' | {
              read json; echo "matrix=$json" >> "$GITHUB_OUTPUT"; echo "Matrix: $json" >&2; }
          fi

  classify:
    needs: enumerate-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo_slug: ${{ fromJson(needs.enumerate-projects.outputs.matrix) }}
    steps:
      - name: Collect repository metrics (tolerant)
        id: metrics
        shell: bash
        env:
          REPO: ${{ matrix.repo_slug }}
        run: |
          set -euo pipefail
          fields="nameWithOwner,isArchived,defaultBranchRef,createdAt,updatedAt,assignableUsers,issues,latestRelease,pushedAt"
          if ! gh repo view "$REPO" --json "$fields" > repo.json 2>err.log; then
            echo "‚ö†Ô∏è  $REPO ‚Äì $(cat err.log)" >&2
            echo '{}' > repo.json
          fi
          echo "json=$(cat repo.json)" >> "$GITHUB_OUTPUT"

      - name: Determine lifecycle phase (inline)
        id: phase
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const repo = JSON.parse(process.env.REPO_JSON || '{}');
            function daysAgo(dt){return (Date.now()-new Date(dt))/(864e5);}  
            let phase='Unknown';
            if(Object.keys(repo).length===0){phase='Inaccessible';}
            else if(repo.isArchived){phase='Archive';}
            else{
              const contributors=repo.assignableUsers?.totalCount||0;
              const releases=repo.releases?.totalCount||0;
              const silent=daysAgo(repo.updatedAt);
              if(contributors<3){phase='Spark';}
              else if(contributors<5||releases===0){phase='Incubation';}
              else if(silent<180){phase='Active Development';}
              else if(silent<365){phase='Stable';}
              else{phase='Maintenance';}
            }
            core.setOutput('phase',phase);
            const fs=require('fs');
            try{fs.writeFileSync('repo.json',JSON.stringify({phase},null,2));}catch{ }
        env:
          REPO_JSON: ${{ steps.metrics.outputs.json }}

      - name: Sanitize artifact name
        shell: bash
        env:
          REPO: ${{ matrix.repo_slug }}
        run: |
          safe="${REPO//\//--}"
          echo "ART_NAME=$safe" >> $GITHUB_ENV

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ART_NAME }}.json"
          path: repo.json

  publish-report:
    needs: classify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # ----------------------------------------------------------------------
      # Build Markdown summary grouped by *Project¬†Org* ----------------------
      # ----------------------------------------------------------------------
      - id: build-md
        shell: bash
        run: |
          set -euo pipefail

          declare -A rows  # associative array keyed by project ‚Üí accumulated rows

          for dir in artifacts/*; do
            [[ -d "$dir" ]] || continue
            slug=$(basename "$dir")             # org--repo
            full=${slug//--/\/}                 # ‚Üí org/repo
            project=${full%%/*}                  # org
            repo=${full#*/}                      # repository name
            phase=$(jq -r '.phase // "Unknown"' "$dir/repo.json" 2>/dev/null || echo Unknown)
            rows[$project]+=$'\n'"| $repo | $phase |"
          done

          {
            echo "# LFN Project Lifecycle Summary"
            for project in "${!rows[@]}"; do
              echo
              echo "## $project"
              echo "| Repository | Phase |"
              echo "|------------|-------|"
              # print rows for this project, sorted alphabetically by repository
              printf '%s\n' "${rows[$project]}" | sort
            done
          } > summary.md

          # Expose as step output and to run summary
          {
            echo 'summary<<EOF'
            cat summary.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

          cat summary.md >> "$GITHUB_STEP_SUMMARY"

      - uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.build-md.outputs.summary }}
          MODE: ${{ github.event.inputs.mode || 'review' }}
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const mode=process.env.MODE;
            const body=process.env.SUMMARY;
            const title=mode==='induction' ? `üÜï LFN Project Induction` : 'üîÑ Weekly Lifecycle Review ‚Äì LFN Projects';
            const {data:issues}=await github.rest.issues.listForRepo({owner:context.repo.owner,repo:context.repo.repo,labels:'lfn-governance',state:'open',per_page:100});
            const existing=issues.find(i=>i.title.startsWith(title));
            if(existing){await github.rest.issues.update({owner:context.repo.owner,repo:context.repo.repo,issue_number:existing.number,body});}
            else{await github.rest.issues.create({owner:context.repo.owner,repo:context.repo.repo,title,labels:['lfn-governance'],body});}

      - name: Notify Slack
        if: env.SLACK_WEBHOOK
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: '{"text":"LFN governance run finished ‚Äì see issue for details"}'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
