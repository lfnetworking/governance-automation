# =============================================================================
#  LFN Project Governance Automation Workflow – *Option C* (auto‑discover repos)
#  ---------------------------------------------------------------------------
#  CHANGELOG 2025‑04‑17‑g
#  • Fixed "Identifier 'core' has already been declared" by removing the extra
#    `const core = require('@actions/core');` inside the github‑script block.
# =============================================================================
name: "LFN Project Governance Automation"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose the run mode"
        required: true
        default: "review"
        type: choice
        options: [review, induction]
      project_org:
        description: "(induction) GitHub org where the new project lives"
        required: false
      project_repo:
        description: "(induction) Repository slug <org>/<repo>"
        required: false
  schedule:
    - cron: "0 9 * * 1"   # 09:00 UTC Monday → 02:00 PT

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

env:
  GH_TOKEN: ${{ secrets.LFN_ADMIN_TOKEN }}

jobs:
  enumerate-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install yq
        run: sudo apt-get update -y && sudo apt-get install -y yq

      - name: Build repo matrix
        id: set-matrix
        shell: bash
        env:
          MODE: ${{ github.event.inputs.mode || 'review' }}
          PROJECT_ORG: ${{ github.event.inputs.project_org }}
          PROJECT_REPO: ${{ github.event.inputs.project_repo }}
        run: |
          set -euo pipefail
          if [[ "$MODE" == "induction" ]]; then
            echo "matrix=[\"${PROJECT_ORG}/${PROJECT_REPO}\"]" >> "$GITHUB_OUTPUT"
          else
            declare -a matrix
            for org in $(yq -r '.orgs[]' .lfn/projects.yaml); do
              echo "📦 $org" >&2
              gh repo list "$org" --json name -q '.[].name' | while read -r repo; do
                matrix+=("$org/$repo")
              done
            done
            printf '%s\n' "${matrix[@]}" | jq -R . | jq -cs '.' | {
              read json; echo "matrix=$json" >> "$GITHUB_OUTPUT"; echo "Matrix: $json" >&2; }
          fi

  classify:
    needs: enumerate-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo_slug: ${{ fromJson(needs.enumerate-projects.outputs.matrix) }}
    steps:
      - name: Collect repository metrics (tolerant)
        id: metrics
        shell: bash
        env:
          REPO: ${{ matrix.repo_slug }}
        run: |
          set -euo pipefail
          fields="nameWithOwner,isArchived,defaultBranchRef,createdAt,updatedAt,assignableUsers,issues,releases,pushedAt"
          if ! gh repo view "$REPO" --json "$fields" > repo.json 2>err.log; then
            echo "⚠️  $REPO – $(cat err.log)" >&2
            echo '{}' > repo.json
          fi
          echo "json=$(cat repo.json)" >> "$GITHUB_OUTPUT"

      - name: Determine lifecycle phase (inline)
        id: phase
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const repo = JSON.parse(process.env.REPO_JSON || '{}');
            function daysAgo(dt){return (Date.now()-new Date(dt))/(864e5);}  
            let phase='Unknown';
            if(Object.keys(repo).length===0){phase='Inaccessible';}
            else if(repo.isArchived){phase='Archive';}
            else{
              const contributors=repo.assignableUsers?.totalCount||0;
              const releases=repo.releases?.totalCount||0;
              const silent=daysAgo(repo.updatedAt);
              if(contributors<3){phase='Spark';}
              else if(contributors<5||releases===0){phase='Incubation';}
              else if(silent<180){phase='Active Development';}
              else if(silent<365){phase='Stable';}
              else{phase='Maintenance';}
            }
            core.setOutput('phase',phase);
        env:
          REPO_JSON: ${{ steps.metrics.outputs.json }}

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.repo_slug }}.json"
          path: repo.json

  publish-report:
    needs: classify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Build markdown summary without external script
      - id: build-md
        shell: bash
        run: |
          set -euo pipefail
          echo "| Repository | Phase |" > summary.md
          echo "|------------|-------|" >> summary.md
          for f in artifacts/*/*.json; do
            repo=$(basename "${f%.json}")
            phase=$(jq -r '.phase // "Unknown"' "$f" 2>/dev/null || echo "Unknown")
            echo "| $repo | $phase |" >> summary.md
          done
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.build-md.outputs.summary }}
          MODE: ${{ github.event.inputs.mode || 'review' }}
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const mode=process.env.MODE;
            const body=process.env.SUMMARY;
            const title=mode==='induction' ? `🆕 LFN Project Induction` : '🔄 Weekly Lifecycle Review – LFN Projects';
            const {data:issues}=await github.rest.issues.listForRepo({owner:context.repo.owner,repo:context.repo.repo,labels:'lfn-governance',state:'open',per_page:100});
            const existing=issues.find(i=>i.title.startsWith(title));
            if(existing){await github.rest.issues.update({owner:context.repo.owner,repo:context.repo.repo,issue_number:existing.number,body});}
            else{await github.rest.issues.create({owner:context.repo.owner,repo:context.repo.repo,title,labels:['lfn-governance'],body});}

      - name: Notify Slack
        if: env.SLACK_WEBHOOK
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: '{"text":"LFN governance run finished – see issue for details"}'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: '{"text":"LFN governance run finished – see issue for details"}'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

# ----------------------------------------------------------------------------
#  No external helper scripts required anymore.
# ----------------------------------------------------------------------------
