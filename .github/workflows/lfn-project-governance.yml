# =============================================================================
#  LFN Project Governance Automation Workflow – *Option C* (auto‑discover repos)
#  ---------------------------------------------------------------------------
#  CHANGELOG 2025‑04‑17‑e
#  • Added fault‑tolerant wrapper around `gh repo view` in the *classify* job.
#    When a repo is private/archived/missing, we log a warning, drop an empty
#    `{}` placeholder, and continue—so one bad repo no longer fails the matrix.
# =============================================================================
name: "LFN Project Governance Automation"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose the run mode"
        required: true
        default: "review"
        type: choice
        options: [review, induction]
      project_org:
        description: "(induction) GitHub org where the new project lives"
        required: false
      project_repo:
        description: "(induction) Repository slug <org>/<repo>"
        required: false
  schedule:
    - cron: "0 9 * * 1"   # 09:00 UTC Monday → 02:00 PT

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

env:
  GH_TOKEN: ${{ secrets.LFN_ADMIN_TOKEN }}   # Auth for all gh CLI calls

jobs:
  enumerate-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install yq (YAML processor)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y yq

      - name: Read org inventory & expand to repo list
        id: set-matrix
        shell: bash
        env:
          MODE: ${{ github.event.inputs.mode || 'review' }}
          PROJECT_ORG: ${{ github.event.inputs.project_org }}
          PROJECT_REPO: ${{ github.event.inputs.project_repo }}
        run: |
          set -euo pipefail
          if [[ "$MODE" == "induction" ]]; then
            matrix_json="[\"${PROJECT_ORG}/${PROJECT_REPO}\"]"
          else
            declare -a matrix
            for org in $(yq -r '.orgs[]' .lfn/projects.yaml); do
              echo "📦 Enumerating repos in $org" >&2
              while read -r repo; do
                matrix+=("$org/$repo")
              done < <(gh repo list "$org" --json name -q '.[].name')
            done
            matrix_json=$(printf '%s\n' "${matrix[@]}" | jq -R . | jq -cs .)
          fi
          echo "Matrix JSON: $matrix_json" >&2
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  classify:
    needs: enumerate-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo_slug: ${{ fromJson(needs.enumerate-projects.outputs.matrix) }}
    steps:
      - name: 🔍  Collect repository metrics (tolerant)
        id: metrics
        shell: bash
        env:
          REPO: ${{ matrix.repo_slug }}
        run: |
          set -euo pipefail
          fields="nameWithOwner,defaultBranchRef,createdAt,updatedAt,assignableUsers,issues,releases,pushedAt"
          if ! gh repo view "$REPO" --json "$fields" > repo.json 2>err.log; then
            echo "⚠️  Skipping $REPO – $(cat err.log)" >&2
            echo '{}' > repo.json
          fi
          echo "json=$(cat repo.json)" >> "$GITHUB_OUTPUT"

      - name: 🧮  Classify lifecycle phase
        id: phase
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const data = JSON.parse(process.env.REPO_JSON || '{}');
            const classify = require('./.github/scripts/lifecycle');
            core.setOutput('phase', classify(data));
        env:
          REPO_JSON: ${{ steps.metrics.outputs.json }}

      - name: ⬆️  Upload per‑project result
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.repo_slug }}.json"
          path: repo.json

  publish-report:
    needs: classify
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - id: build-md
        run: |
          node .github/scripts/build-summary.js artifacts > summary.md
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          cat summary.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.build-md.outputs.summary }}
          MODE: ${{ github.event.inputs.mode || 'review' }}
        with:
          github-token: ${{ secrets.LFN_ADMIN_TOKEN }}
          script: |
            const mode = process.env.MODE;
            const body = process.env.SUMMARY;
            const title = mode === 'induction'
              ? `🆕 LFN Project Induction – ${process.env.PROJECT_REPO}`
              : '🔄 Weekly Lifecycle Review – LFN Projects';
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'lfn-governance',
              state: 'open',
              per_page: 100,
            });
            const existing = issues.find(i => i.title.startsWith(title));
            if (existing) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body,
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                labels: ['lfn-governance'],
                body,
              });
            }

      - name: 💬  (Optional) Notify Slack
        if: env.SLACK_WEBHOOK != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            { "text": "LFN governance run finished – see issue for details" }
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

# ----------------------------------------------------------------------------
#  Helper script stubs remain unchanged
# ----------------------------------------------------------------------------
